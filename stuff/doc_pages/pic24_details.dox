/**
\page pic24_details PIC24/dsPIC details

\tableofcontents

PIC24/dsPIC port implementation details

\section pic24_context_switch Context switch
The context switch is implemented using the external interrupt 0 (`INT0`). It
is handled completely by the kernel, application should never touch it.

\section pic24_interrupts Interrupts

For detailed information about interrupts in TNeoKernel, refer to the page \ref
interrupts.

PIC24/dsPIC TNeoKernel port supports nested interrupts. It allows to specify
the range of "system interrupt priorities"; and kernel services are allowed to
call only from interrupts of these priorities. These interrupts will be
referred to as "system interrupts".

System interrupts get disabled by the kernel for short periods of time,
when kernel needs to modify critical data.

System interrupts use separate interrupt stack instead of the task's stack.
This approach saves a lot of RAM.

The range is specified by just a single number: `#TN_P24_SYS_IPL`. Here is
a list of priorities and their characteristics:

- priorities `[1 .. #TN_P24_SYS_IPL]`: 
  - Kernel services **are** allowed to call;
  - Separate interrupt stack is used by ISR;
  - Interrupts get disabled for short periods of time when modifying critical
    kernel data (for about 100 cycles or the like).
- priorities `(#TN_P24_SYS_IPL .. 6]`:
  - Kernel services **are not** allowed to call;
  - Task's stack is used by ISR;
  - Interrupts are not disabled when modifying critical kernel data, but they
    are disabled for 4..8 cycles by `disi` instruction when entering/exiting
    system ISR: we need to safely modify `SP` and `SPLIM`.
- priority `7`:
  - Kernel services **are not** allowed to call;
  - Task's stack is used by ISR;
  - Interrupts are never disabled by the kernel. Note that `disi` instruction
    leaves interrupts of priority 7 enabled. 

The kernel provides C-language macro for calling C-language **system**
interrupt service routines.

Usage is as follows:

\code{.c}
/* 
 * Timer 1 interrupt handler using software interrupt context saving,  
 * PSV is handled automatically:
 */
tn_soft_isr(_T1Interrupt, auto_psv)
{
   //-- clear interrupt flag
   IFS0bits.T1IF = 0;

   //-- do something useful
}
\endcode

\attention do **not** use this macro for non-system interrupt (that is, for
interrupt of priority higher than `#TN_P24_SYS_IPL`). Use standard way to
define it. If you violate this rule, debugger will be halted by the kernel when
entering ISR. In release build, CPU is just reset.

*/
