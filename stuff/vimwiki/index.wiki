
= tneokernel dev =

[[how_to_release]]
[[thoughts]]



== Routine ==

   * [ ] Exchange object
   * [X] rename tn_callback_... to _tn_cb_....
   * [X] check_param functions: make them take pointer to `const` struct.
   * [X] remove "public data" sections, there might be protected or private data only.
   * [X] add comments to _tn_list.h suggesting that macros were changed because the kernel can't use gcc-specific extensions such as typeof().


=== profiler ===

   * [X] profiler for all platforms
   * [X] add TN_ON_SWITCH_CONTEXT_HANDLER_PRESENT, which should reflect TN_STACK_OVERFLOW_CHECK as well (in the future).
   * [X] refactor profiler structure names
   * [X] document things
   * [X] document profiler functionality in arch-dependent functions
   * [X] system service for getting profiler information
   * [X] make TN_PROFILER off by default
   * [ ] add service to set task name
   * [ ] test without TN_PROFILER
   * [ ] test without TN_DEBUG

=== dynamic tick ===

   * [X] make TN_DYNAMIC_TICK off by default
   * [X] at the quick_guide page, add something about dynamic tick.
   * [X] document TN_DYNAMIC_TICK
   * [X] timers_implementation: move to tn_timer_static.c or create tn_timer_static.h and move there
   * [ ] probably, make round_robin unsupported if TN_DYNAMIC_TICK is on? it makes a little sense to bother with dynamic tick, and then wake up regularly for round robin
   * [ ] think carefully what happens if system tick count changes after we get it in tn_tick_int_processing(), and then, some timer function gets executed and it calls tn_timer_start()
   * [ ] at the page time_ticks.dox, probably show easy yet not so efficient implementation with dynamic tick
   * [ ] test overflow of the tick count (init it to something like 0xffffff00)


=== PIC24/dsPIC port ===

   * [X] tn_arch_sr_restore: restore only IPL field
   * [X] TN_IS_INT_DISABLED() : implement
   * [X] handle IFS1 atomically (__tn_arch_context_switch_pend, __INT1Interrupt)
   * [X] SPLIM
   * [X] Rewrite context switch routine (__INT0Interrupt)
   * [X] ffs

=== Cortex-M port ===

   * [X] document building: all include directories, C99, Asm --cpreproc, etc
   * [X] preprocess .S file
   * [X] make .S file work with GCC, too
   * [X] don't include cmsis by the core; use hardcoded addresses instead. It should work for all cortex-m devices.
   * [X] FPU support
   * [X] cortex m0 support
   * [X] manage PSP correctly (now, first context switch works, but the next one doesn't)
   * [X] use interrupt_stack

=== exchange methods ===

   * tn_exch_create
   * tn_exch_delete
   * tn_exch_link_add
   * tn_exch_link_remove
   * 
   * tn_read
   * tn_write
   * tn_iwrite
   * 
   * tn_lock
   * tn_unlock
   * tn_unlock_and_notify
   * tn_iunlock_and_notify

== Plans ==

   * [ ] Exchange object: see AVIX User Guide & Reference Guide, 6.6.8
   * [ ] Event group: probably, add mask of flags that should be cleared automatically when any task `wait`s for it
   * [ ] Add a destroy callback for each task, this callback (if not NULL) should be called whenever task is terminated with `tn_task_exit()` or `tn_task_terminate()`.
   * [o] Examples
      * [X] Separate platform-dependent code from the real example project code
      * [ ] Provide examples for all common system services: timers, queues, etc.
   * [ ] Port to ARM
   * [ ] Test how much is it slower to use tn_arch_sr_save_int_dis()/tn_arch_sr_restore() instead of TN_INT_DIS_SAVE()/TN_INT_RESTORE()
   * [ ] Optionally, check if stack pointer is overflowed on each context switch.



   

